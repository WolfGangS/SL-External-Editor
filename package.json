{
  "name": "sl-external-editor",
  "displayName": "SL External Editor",
  "publisher": "wlf-io",
  "description": "Integrate vs code with the Second Life client external editor feature",
  "version": "0.2.6",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/WolfGangS/SL-External-Editor.git"
  },
  "icon": "icon.png",
  "engines": {
    "vscode": "^1.98.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "sl-external-editor.enable",
        "title": "SL External Editor: Enable"
      },
      {
        "command": "sl-external-editor.updateAll",
        "title": "SL External Editor: Update All Downloads"
      },
      {
        "command": "sl-external-editor.updateLSP",
        "title": "SL External Editor: Update LSP Defs"
      },
      {
        "command": "sl-external-editor.setupSelene",
        "title": "SL External Editor: Setup/Update Selene"
      },
      {
        "command": "sl-external-editor.updateSnippets",
        "title": "SL External Editor: Update Snippets"
      },
      {
        "command": "sl-external-editor.runPreProc",
        "title": "SL External Editor: Run preprocessor"
      },
      {
        "command": "sl-external-editor.installPreProc",
        "title": "SL External Editor: Install PreProc"
      }
    ],
    "configuration": {
      "title": "SL External Editor",
      "properties": {
        "secondLifeExternalEditor.enabled": {
          "description": "Wether the extension should be enabled.\nReconmend setting this in workspace rather than globally",
          "type": "boolean",
          "default": false,
          "score": "window"
        },
        "secondLifeExternalEditor.dir.projects": {
          "description": "The directory path the extension will use to look for projects to automatically open for",
          "type": "string",
          "default": "",
          "scope": "machine"
        },
        "secondLifeExternalEditor.hints.prefix": {
          "markdownDescription": "The prefix character after a comment that the extension will use to look for hints as to how to handle the file\n\ne.g. `--@project <project_name>`\nSuported Hints\n|Hint|Description|\n|----|----|\n|`project`|The folder in the projects dir to look in|\n|`path`|The path on the system to look in, (overrides project)|\n|`file`|The file in project or path to link to|",
          "type": "string",
          "default": "@",
          "scope": "machine"
        },
        "secondLifeExternalEditor.watcher.tempFilesRequireDirectoryPrefix": {
          "markdownDescription": "Wether the the script must start with the direcotry name before the file name\ne.g. Script in folder `project_name/main.luau` will require the script in sl to be named like `project_name main` or `project_name/main`\nThis can be bypassed with hints",
          "type": "boolean",
          "default": false,
          "scope": "window"
        },
        "secondLifeExternalEditor.watcher.fileExtensions": {
          "description": "What file extensions should the be monitored for",
          "type": "array",
          "default": [
            "lsl",
            "luau",
            "lua",
            "slua"
          ],
          "items": {
            "type": "string"
          },
          "scope": "machine"
        },
        "secondLifeExternalEditor.matcher.autoCloseTempScript": {
          "markdownDescription": "If temporary script files should be automatically closed on finding a match",
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "secondLifeExternalEditor.preprocessor.watchIncludes": {
          "markdownDescription": "Wether the extension should monitor included files via #include, or preprocessor file list output",
          "type": "boolean",
          "default": true,
          "scope": "resource"
        },
        "secondLifeExternalEditor.preprocessor.command.lsl": {
          "markdownDescription": "Command to execute as a preprocessor when lsl files change, the output of this will be put into the temp file the viewer created\n\nSupports the following replacements\n\n|Replacement|Description|\n|----|----|\n|`%script%`|The path of the file for the preprocessor to start on|\n|`%out%`|The file to ouput to, if specified extension fill look for writes to that file for the output rather than `std_out`|\n|`%lang%`|The language that the extension believes the script is|\n\ne.g. `python ~/sl/LSL-PyOptimizer/main.py --bom %script%`",
          "type": "string",
          "default": "",
          "scope": "resource"
        },
        "secondLifeExternalEditor.preprocessor.command.slua": {
          "markdownDescription": "Command to execute as a preprocessor when slua files change, the output of this will be put into the temp file the viewer created\n\nSupports the following replacements\n\n|Replacement|Description|\n|----|----|\n|`%script%`|The path of the file for the preprocessor to start on|\n|`%out%`|The file to ouput to, if specified extension fill look for writes to that file for the output rather than `std_out`|\n|`%lang%`|The language that the extension believes the script is|\n\ne.g. `python ~/sl/LSL-PyOptimizer/main.py --bom %script%`",
          "type": "string",
          "default": "",
          "scope": "resource"
        },
        "secondLifeExternalEditor.download.enabled": {
          "markdownDescription": "Wether extension should download SLua Type Defs",
          "type": "boolean",
          "default": true,
          "scope": "window"
        },
        "secondLifeExternalEditor.download.location": {
          "markdownDescription": "Where downloaded definition files should be put for your projectm (selene cannot be global, and will default to root)",
          "type": "string",
          "enum": [ "global", "root", "vscode", "types" ],
          "markdownEnumDescriptions": [
            "Store in vscodes global config location",
            "Put the type def files at the root level of your workspace",
            "Put the type def files in the .vscode folder",
            "Put the type def files in a folder called '.types'"
          ],
          "enumItemLabels": [ "Global", "Root", ".vscode", ".types" ],
          "default": "types",
          "scope": "window"
        },
        "secondLifeExternalEditor.download.snippets": {
          "markdownDescription": "Url's to download as snippets.",
          "type": "array",
          "default": [
            "https://slua.wlf.io/dist/slua.code-snippets"
          ],
          "scope": "machine"
        },
        "secondLifeExternalEditor.luau-lsp.downloadTypeDefs": {
          "markdownDescription": "Url's to download SLua type definition files for the luau-lsp from.",
          "type": "array",
          "default": [
            "https://slua.wlf.io/dist/ll.d.luau"
          ],
          "scope": "machine"
        },
        "secondLifeExternalEditor.luau-lsp.downloadApiDocs": {
          "markdownDescription": "Url's to download SLua documentation files for the luau-lsp from.",
          "type": "array",
          "default": [
            "https://slua.wlf.io/dist/ll.d.json"
          ],
          "scope": "machine"
        },
        "secondLifeExternalEditor.selene.download": {
          "markdownDescription": "Url's to download SLua Selene Standard Library files from",
          "type": "string",
          "default": "https://slua.wlf.io/dist/sl_selene_defs.yml",
          "scope": "machine"
        },
        "secondLifeExternalEditor.selene.downloadToml": {
          "markdownDescription": "Url's to download SLua Selene Standard Library files from",
          "type": "string",
          "default": "https://slua.wlf.io/dist/selene.toml",
          "scope": "machine"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.98.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.28.0",
    "@typescript-eslint/parser": "^8.28.0",
    "eslint": "^9.23.0",
    "typescript": "^5.8.2",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1"
  }
}
